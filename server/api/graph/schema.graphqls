# GraphQL schema example
#
# https://gqlgen.com/getting-started/

directive @hasRole(role: Role!) on FIELD_DEFINITION

scalar Date
scalar Timestamp

enum Role {
  MEMBER
  TRAINER
  ADMIN
}

type User {
  user_id: ID!
  username: String!
  user_email: String!
  first_name: String!
  last_name: String!
}

type Metric {
  metric_id: ID!
  date: Date!
  metric: String!
}

type Goal {
  goal_id: ID!
  goal_title: String!
  goal_date: Date!
  goal_value: String!
}

type Membership {
  description: String!
  status: String!
}

type Profile {
  user: User!
  membership: Membership!
  goals: [Goal!]
  metrics: [Metric!]
}

type Bill {
  bill_id: ID!
  user_id: ID!
  description: String!
  status: String!
  date: Date!
}

type Equipment {
  equipment_id: ID!
  equipment_type: String!
  equipment_status: String!
  room: Room
}

type Room {
  room_id: ID!
  description: String!
}

type Event {
  trainers_id: [ID!]!
  event_id: ID!
  description: String!
  type: String!
  status: String!
  capacity: Int!
  filled: Int!
}

type Query {
  ViewProfile: Profile! @hasRole(role: MEMBER)
  ViewUpcomingEvents(type: String): [Event!] @hasRole(role: MEMBER)
  ViewUpcomingEventsLead(type: String): [Event!] @hasRole(role: TRAINER)
  GetAllUsersTrained: [User!]! @hasRole(role: TRAINER)
  SearchMember(firstname: String, lastname: String): [Profile!] @hasRole(role: TRAINER)
  GetTrainers: [User!] @hasRole(role: MEMBER)
  GetBills(status: String): [Bill!]! @hasRole(role: MEMBER)
  ViewAllBills(status: String, id: ID): [Bill]! @hasRole(role: ADMIN)
  GetAllEquipment(status: String, type: String): [Equipment!]! @hasRole(role: ADMIN)
  GetEquipment(id: ID!): Equipment! @hasRole(role: ADMIN)
  GetRooms: [Room!]! @hasRole(role: ADMIN)
}

input Register {
  user_id: ID!
  event_id: ID!
}

input ActivateEquipment {
  equipment_id: ID!
  room_id: ID!
}

input DeactivateEquipment {
  equipment_id: ID!
  equipment_status: String!
}

input MoveEquipment {
  equipment_id: ID!
  room_id: ID!
}

input Class {
  trainers: [ID!]!
  room: ID!
  title: String!
  capacity: Int!
  start_time: Timestamp!
  end_time: Timestamp!
}

input Session {
  room: ID!
  title: String!
  capacity: Int!
  start_time: Timestamp!
  end_time: Timestamp!
}

input SessionStatus {
  session_id: ID!
  status: String!
}

input ClassStatus {
  class_id: ID!
  status: String!
}

input ClassTrainer {
  class_id: ID!
  trainer_id: ID!
}

input PayBill {
  bill_id: String!
}

input NewMetric {
  date: Date!
  metric: String!
}

input NewGoal {
  goal_title: String!
  goal_date: Date!
  goal_value: String!
}

type Mutation {
  RegisterForEvent(input: Register!): Boolean! @hasRole(role: MEMBER)
  UnregisterForEvent(input: Register!): Boolean! @hasRole(role: MEMBER)
  ActivateEquipment(input: ActivateEquipment!): Equipment! @hasRole(role: ADMIN)
  DeactivateEquipment(input: DeactivateEquipment!): Equipment! @hasRole(role: ADMIN)
  MoveEquipment(input: MoveEquipment!): Boolean! @hasRole(role: ADMIN)
  CreateClass(input: Class!): Boolean! @hasRole(role: ADMIN)
  EditClassStatus(input: ClassStatus!): Boolean! @hasRole(role: ADMIN)
  AddClassTrainer(input: ClassTrainer!): Boolean! @hasRole(role: ADMIN)
  RemoveClassTrainer(input: ClassTrainer!): Boolean! @hasRole(role: ADMIN)
  CancelClass(input: ClassStatus!): Boolean! @hasRole(role: ADMIN)
  CreateAvailableSession(input: Session!): Boolean! @hasRole(role: TRAINER)
  EditSessionStatus(input: SessionStatus!): Boolean! @hasRole(role: TRAINER)
  CancelSession(input: SessionStatus!): Boolean! @hasRole(role: TRAINER)
  PayBill(input: PayBill!): Boolean! @hasRole(role: MEMBER)
  UpdateBillStatus(input: PayBill!): Boolean! @hasRole(role: ADMIN)
  AddMetric(input: NewMetric!): Boolean! @hasRole(role: MEMBER)
  AddGoal(input: NewGoal!): Boolean! @hasRole(role: MEMBER)
}
