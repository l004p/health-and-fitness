// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: event.sql

package pg

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addEvent = `-- name: addEvent :exec
INSERT INTO calender_events (room_id, event_type, max_attendees, event_status, event_title, start_time, end_time) 
VALUES ($1, $2, $3, 'UPCOMING', $4, $5, $6)
`

type addEventParams struct {
	RoomID       int32
	EventType    string
	MaxAttendees int32
	EventTitle   string
	StartTime    pgtype.Timestamp
	EndTime      pgtype.Timestamp
}

func (q *Queries) addEvent(ctx context.Context, arg addEventParams) error {
	_, err := q.db.Exec(ctx, addEvent,
		arg.RoomID,
		arg.EventType,
		arg.MaxAttendees,
		arg.EventTitle,
		arg.StartTime,
		arg.EndTime,
	)
	return err
}

const addEventLeader = `-- name: addEventLeader :exec
INSERT INTO leading_event (trainer_id, event_id)
VALUES ($1, $2)
`

type addEventLeaderParams struct {
	TrainerID int32
	EventID   int32
}

func (q *Queries) addEventLeader(ctx context.Context, arg addEventLeaderParams) error {
	_, err := q.db.Exec(ctx, addEventLeader, arg.TrainerID, arg.EventID)
	return err
}

const cancelEventRegistration = `-- name: cancelEventRegistration :exec
DELETE FROM attending_event
WHERE member_id=$1 AND event_id=$2
`

type cancelEventRegistrationParams struct {
	MemberID int32
	EventID  int32
}

func (q *Queries) cancelEventRegistration(ctx context.Context, arg cancelEventRegistrationParams) error {
	_, err := q.db.Exec(ctx, cancelEventRegistration, arg.MemberID, arg.EventID)
	return err
}

const changeEventRoom = `-- name: changeEventRoom :exec
UPDATE calender_events
SET room_id=$2
WHERE event_id=$1
`

type changeEventRoomParams struct {
	EventID int32
	RoomID  int32
}

func (q *Queries) changeEventRoom(ctx context.Context, arg changeEventRoomParams) error {
	_, err := q.db.Exec(ctx, changeEventRoom, arg.EventID, arg.RoomID)
	return err
}

const changeEventStatus = `-- name: changeEventStatus :exec
UPDATE calender_events
SET event_status=$2
WHERE event_id=$1
`

type changeEventStatusParams struct {
	EventID     int32
	EventStatus string
}

func (q *Queries) changeEventStatus(ctx context.Context, arg changeEventStatusParams) error {
	_, err := q.db.Exec(ctx, changeEventStatus, arg.EventID, arg.EventStatus)
	return err
}

const deleteEvent = `-- name: deleteEvent :exec
DELETE FROM calender_events
WHERE event_id=$1
`

func (q *Queries) deleteEvent(ctx context.Context, eventID int32) error {
	_, err := q.db.Exec(ctx, deleteEvent, eventID)
	return err
}

const getNumRegistrees = `-- name: getNumRegistrees :one
SELECT COUNT(*)
FROM attending_event
WHERE event_id=$1
`

func (q *Queries) getNumRegistrees(ctx context.Context, eventID int32) (int64, error) {
	row := q.db.QueryRow(ctx, getNumRegistrees, eventID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const registerForEvent = `-- name: registerForEvent :exec
INSERT INTO attending_event (member_id, event_id)
VALUES ($1, $2)
`

type registerForEventParams struct {
	MemberID int32
	EventID  int32
}

func (q *Queries) registerForEvent(ctx context.Context, arg registerForEventParams) error {
	_, err := q.db.Exec(ctx, registerForEvent, arg.MemberID, arg.EventID)
	return err
}

const removeEventLeader = `-- name: removeEventLeader :exec
DELETE FROM leading_event
WHERE trainer_id=$1 AND event_id=$2
`

type removeEventLeaderParams struct {
	TrainerID int32
	EventID   int32
}

func (q *Queries) removeEventLeader(ctx context.Context, arg removeEventLeaderParams) error {
	_, err := q.db.Exec(ctx, removeEventLeader, arg.TrainerID, arg.EventID)
	return err
}
