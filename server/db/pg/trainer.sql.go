// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: trainer.sql

package pg

import (
	"context"
)

const addInterest = `-- name: addInterest :exec
INSERT INTO trainer_interests(trainer_id, interest)
VALUES($1, $2)
`

type addInterestParams struct {
	TrainerID int32
	Interest  string
}

func (q *Queries) addInterest(ctx context.Context, arg addInterestParams) error {
	_, err := q.db.Exec(ctx, addInterest, arg.TrainerID, arg.Interest)
	return err
}

const addMemberToRoster = `-- name: addMemberToRoster :exec
INSERT INTO member_trained (trainer_id, member_id)
VALUES ($1, $2)
`

type addMemberToRosterParams struct {
	TrainerID int32
	MemberID  int32
}

func (q *Queries) addMemberToRoster(ctx context.Context, arg addMemberToRosterParams) error {
	_, err := q.db.Exec(ctx, addMemberToRoster, arg.TrainerID, arg.MemberID)
	return err
}

const deleteInterest = `-- name: deleteInterest :exec
DELETE FROM trainer_interests
WHERE trainer_id=$1 AND interest=$2
`

type deleteInterestParams struct {
	TrainerID int32
	Interest  string
}

func (q *Queries) deleteInterest(ctx context.Context, arg deleteInterestParams) error {
	_, err := q.db.Exec(ctx, deleteInterest, arg.TrainerID, arg.Interest)
	return err
}

const getAllMembersTraining = `-- name: getAllMembersTraining :many
SELECT u.first_name, u.last_name, u.username
FROM users u 
INNER JOIN member_trained mt
ON u.user_id=mt.member_id
WHERE mt.trainer_id=$1
`

type getAllMembersTrainingRow struct {
	FirstName string
	LastName  string
	Username  string
}

func (q *Queries) getAllMembersTraining(ctx context.Context, trainerID int32) ([]getAllMembersTrainingRow, error) {
	rows, err := q.db.Query(ctx, getAllMembersTraining, trainerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []getAllMembersTrainingRow
	for rows.Next() {
		var i getAllMembersTrainingRow
		if err := rows.Scan(&i.FirstName, &i.LastName, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTrainerInterests = `-- name: getTrainerInterests :many
SELECT interest
FROM trainer_interests
WHERE trainer_id=$1
`

func (q *Queries) getTrainerInterests(ctx context.Context, trainerID int32) ([]string, error) {
	rows, err := q.db.Query(ctx, getTrainerInterests, trainerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var interest string
		if err := rows.Scan(&interest); err != nil {
			return nil, err
		}
		items = append(items, interest)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTrainersByInterest = `-- name: getTrainersByInterest :many
SELECT u.first_name, u.last_name, u.username
FROM trainer_interests ti
INNER JOIN users u
ON u.user_id=ti.trainer_id
WHERE ti.interest=$1
`

type getTrainersByInterestRow struct {
	FirstName string
	LastName  string
	Username  string
}

func (q *Queries) getTrainersByInterest(ctx context.Context, interest string) ([]getTrainersByInterestRow, error) {
	rows, err := q.db.Query(ctx, getTrainersByInterest, interest)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []getTrainersByInterestRow
	for rows.Next() {
		var i getTrainersByInterestRow
		if err := rows.Scan(&i.FirstName, &i.LastName, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByName = `-- name: getUserByName :many
SELECT username, first_name, last_name
FROM users
WHERE first_name=$1 OR last_name=$2
`

type getUserByNameParams struct {
	FirstName string
	LastName  string
}

type getUserByNameRow struct {
	Username  string
	FirstName string
	LastName  string
}

func (q *Queries) getUserByName(ctx context.Context, arg getUserByNameParams) ([]getUserByNameRow, error) {
	rows, err := q.db.Query(ctx, getUserByName, arg.FirstName, arg.LastName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []getUserByNameRow
	for rows.Next() {
		var i getUserByNameRow
		if err := rows.Scan(&i.Username, &i.FirstName, &i.LastName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeMemberFromRoster = `-- name: removeMemberFromRoster :exec
DELETE FROM member_trained
WHERE trainer_id=$1 AND member_id=$2
`

type removeMemberFromRosterParams struct {
	TrainerID int32
	MemberID  int32
}

func (q *Queries) removeMemberFromRoster(ctx context.Context, arg removeMemberFromRosterParams) error {
	_, err := q.db.Exec(ctx, removeMemberFromRoster, arg.TrainerID, arg.MemberID)
	return err
}

const updateInterest = `-- name: updateInterest :exec
UPDATE trainer_interests
SET interest=$2
WHERE trainer_id=$1
`

type updateInterestParams struct {
	TrainerID int32
	Interest  string
}

func (q *Queries) updateInterest(ctx context.Context, arg updateInterestParams) error {
	_, err := q.db.Exec(ctx, updateInterest, arg.TrainerID, arg.Interest)
	return err
}
