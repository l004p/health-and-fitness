// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: goal.sql

package pg

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addGoal = `-- name: addGoal :exec
INSERT INTO goals (member_id, goal_date, title, unit, goal_value)
VALUES ($1, $2, $3, $4, $5)
`

type addGoalParams struct {
	MemberID  int32
	GoalDate  pgtype.Date
	Title     string
	Unit      string
	GoalValue int32
}

func (q *Queries) addGoal(ctx context.Context, arg addGoalParams) error {
	_, err := q.db.Exec(ctx, addGoal,
		arg.MemberID,
		arg.GoalDate,
		arg.Title,
		arg.Unit,
		arg.GoalValue,
	)
	return err
}

const deleteGoal = `-- name: deleteGoal :exec
DELETE FROM goals WHERE goal_id=$1
`

func (q *Queries) deleteGoal(ctx context.Context, goalID int32) error {
	_, err := q.db.Exec(ctx, deleteGoal, goalID)
	return err
}

const getGoal = `-- name: getGoal :one
SELECT goal_id, member_id, goal_date, title, unit, goal_value, goal_type FROM goals
WHERE goal_id=$1
`

func (q *Queries) getGoal(ctx context.Context, goalID int32) (Goal, error) {
	row := q.db.QueryRow(ctx, getGoal, goalID)
	var i Goal
	err := row.Scan(
		&i.GoalID,
		&i.MemberID,
		&i.GoalDate,
		&i.Title,
		&i.Unit,
		&i.GoalValue,
		&i.GoalType,
	)
	return i, err
}

const getGoals = `-- name: getGoals :many
SELECT goal_id, member_id, goal_date, title, unit, goal_value, goal_type FROM goals
WHERE member_id=$1
`

func (q *Queries) getGoals(ctx context.Context, memberID int32) ([]Goal, error) {
	rows, err := q.db.Query(ctx, getGoals, memberID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Goal
	for rows.Next() {
		var i Goal
		if err := rows.Scan(
			&i.GoalID,
			&i.MemberID,
			&i.GoalDate,
			&i.Title,
			&i.Unit,
			&i.GoalValue,
			&i.GoalType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGoalType = `-- name: updateGoalType :exec
UPDATE goals
SET title=$2, unit=$3 AND goal_value=$4 AND goal_type=$5
WHERE goal_id=$1
`

type updateGoalTypeParams struct {
	GoalID    int32
	Title     string
	Unit      string
	GoalValue int32
	GoalType  string
}

func (q *Queries) updateGoalType(ctx context.Context, arg updateGoalTypeParams) error {
	_, err := q.db.Exec(ctx, updateGoalType,
		arg.GoalID,
		arg.Title,
		arg.Unit,
		arg.GoalValue,
		arg.GoalType,
	)
	return err
}

const updateGoalValue = `-- name: updateGoalValue :exec
UPDATE goals
SET goal_value=$2
WHERE goal_id=$1
`

type updateGoalValueParams struct {
	GoalID    int32
	GoalValue int32
}

func (q *Queries) updateGoalValue(ctx context.Context, arg updateGoalValueParams) error {
	_, err := q.db.Exec(ctx, updateGoalValue, arg.GoalID, arg.GoalValue)
	return err
}
