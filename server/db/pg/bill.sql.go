// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: bill.sql

package pg

import (
	"context"
)

const cancelBill = `-- name: cancelBill :exec
UPDATE bills
SET bill_status='CANCELLED'
WHERE bill_id=$1
`

func (q *Queries) cancelBill(ctx context.Context, billID int32) error {
	_, err := q.db.Exec(ctx, cancelBill, billID)
	return err
}

const createBill = `-- name: createBill :exec
INSERT INTO bills (user_id, bill_description, bill_status)
VALUES ($1, $2, 'PENDING')
`

type createBillParams struct {
	UserID          int32
	BillDescription string
}

func (q *Queries) createBill(ctx context.Context, arg createBillParams) error {
	_, err := q.db.Exec(ctx, createBill, arg.UserID, arg.BillDescription)
	return err
}

const getAllUserBills = `-- name: getAllUserBills :many
SELECT bill_id, user_id, bill_description, bill_status, bill_date
FROM bills
WHERE user_id=$1
`

func (q *Queries) getAllUserBills(ctx context.Context, userID int32) ([]Bill, error) {
	rows, err := q.db.Query(ctx, getAllUserBills, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bill
	for rows.Next() {
		var i Bill
		if err := rows.Scan(
			&i.BillID,
			&i.UserID,
			&i.BillDescription,
			&i.BillStatus,
			&i.BillDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBillByID = `-- name: getBillByID :one
SELECT bill_id, user_id, bill_description, bill_status, bill_date FROM bills WHERE bill_id=$1
`

func (q *Queries) getBillByID(ctx context.Context, billID int32) (Bill, error) {
	row := q.db.QueryRow(ctx, getBillByID, billID)
	var i Bill
	err := row.Scan(
		&i.BillID,
		&i.UserID,
		&i.BillDescription,
		&i.BillStatus,
		&i.BillDate,
	)
	return i, err
}

const payBill = `-- name: payBill :exec
UPDATE bills
SET bill_status='COMPLETE'
WHERE bill_id=$1
`

func (q *Queries) payBill(ctx context.Context, billID int32) error {
	_, err := q.db.Exec(ctx, payBill, billID)
	return err
}
